/* 
 * CityPay POS API
 *
 * CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CityPay.Pos.Client;
using CityPay.Pos.Api;
using CityPay.Pos.Model;

namespace CityPay.Pos.Test
{
    /// <summary>
    ///  Class for testing DeviceModuleApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DeviceModuleApiTests
    {
        private DeviceModuleApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DeviceModuleApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DeviceModuleApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DeviceModuleApi
            //Assert.IsInstanceOfType(typeof(DeviceModuleApi), instance, "instance is a DeviceModuleApi");
        }

        
        /// <summary>
        /// Test DeviceInfo
        /// </summary>
        [Test]
        public void DeviceInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceId = null;
            //var response = instance.DeviceInfo(deviceId);
            //Assert.IsInstanceOf<DeviceInfo> (response, "response is DeviceInfo");
        }
        
        /// <summary>
        /// Test Ping
        /// </summary>
        [Test]
        public void PingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceId = null;
            //var response = instance.Ping(deviceId);
            //Assert.IsInstanceOf<Result> (response, "response is Result");
        }
        
    }

}
