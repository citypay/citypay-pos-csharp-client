/* 
 * CityPay POS API
 *
 * CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CityPay.Pos.Client;
using CityPay.Pos.Api;
using CityPay.Pos.Model;

namespace CityPay.Pos.Test
{
    /// <summary>
    ///  Class for testing PaymentModuleApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PaymentModuleApiTests
    {
        private PaymentModuleApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PaymentModuleApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PaymentModuleApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PaymentModuleApi
            //Assert.IsInstanceOfType(typeof(PaymentModuleApi), instance, "instance is a PaymentModuleApi");
        }

        
        /// <summary>
        /// Test Receipt
        /// </summary>
        [Test]
        public void ReceiptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionProgress body = null;
            //var response = instance.Receipt(body);
            //Assert.IsInstanceOf<TransactionResult> (response, "response is TransactionResult");
        }
        
        /// <summary>
        /// Test Refund
        /// </summary>
        [Test]
        public void RefundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SaleRequest body = null;
            //var response = instance.Refund(body);
            //Assert.IsInstanceOf<SaleResponse> (response, "response is SaleResponse");
        }
        
        /// <summary>
        /// Test Reversal
        /// </summary>
        [Test]
        public void ReversalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReversalRequest body = null;
            //var response = instance.Reversal(body);
            //Assert.IsInstanceOf<SaleResponse> (response, "response is SaleResponse");
        }
        
        /// <summary>
        /// Test Sale
        /// </summary>
        [Test]
        public void SaleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SaleRequest body = null;
            //var response = instance.Sale(body);
            //Assert.IsInstanceOf<SaleResponse> (response, "response is SaleResponse");
        }
        
        /// <summary>
        /// Test Transaction
        /// </summary>
        [Test]
        public void TransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionProgress body = null;
            //var response = instance.Transaction(body);
            //Assert.IsInstanceOf<TransactionResult> (response, "response is TransactionResult");
        }
        
    }

}
