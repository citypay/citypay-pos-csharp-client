/* 
 * CityPay POS API
 *
 * CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CityPay.Pos.Client.SwaggerDateConverter;

namespace CityPay.Pos.Model
{
    /// <summary>
    /// TransactionData
    /// </summary>
    [DataContract]
    public partial class TransactionData :  IEquatable<TransactionData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionData" /> class.
        /// </summary>
        /// <param name="AdditionalData">additional data provided within the acquirer response.</param>
        /// <param name="AuxiliaryData">Value provided by online processing.</param>
        /// <param name="CardType">The type of card used such as EMV.</param>
        /// <param name="CompletedAt">The date and time that the transaction was completed in ISO-8166 format.</param>
        /// <param name="CreatedAt">The date and time that the transaction was created in ISO-8166 format.</param>
        /// <param name="CurrencySymbol">The currency symbol used.</param>
        /// <param name="DeclinedByCard">Boolean value should the transaction be declined by the card.</param>
        /// <param name="EmvAppCryptogram">Cryptogram used by the card in processing.</param>
        /// <param name="EmvAppExpirationDate">Expiry date of the card.</param>
        /// <param name="EmvAppTxnCounter">A transaction counter, incremented by the device resulting in a transaction number.</param>
        /// <param name="EmvAuthorizedAmount">The amount authorised.</param>
        /// <param name="EmvCardholderVerificationResults">Verification results within the processing scope.</param>
        /// <param name="EmvCountryCode">A country code returned by the device.</param>
        /// <param name="EmvCryptogramInfoData">Cryptogram info returned by the card.</param>
        /// <param name="EmvIccAppid">The application id (AID) identifying the card used.</param>
        /// <param name="EmvInterchangeProfile">The interchange profile used.</param>
        /// <param name="EmvIssuerAppData">Application data provided by the issuer.</param>
        /// <param name="EmvPanSeqNum">Sequence number provided by the card.</param>
        /// <param name="EmvTerminalCapabilities">Terminal capabilities of the device.</param>
        /// <param name="EmvTerminalType">The terminal type of the device.</param>
        /// <param name="EmvTerminalVerificationResults">TVR provided by the verification process of the transaction.</param>
        /// <param name="EmvTrack2Equivalent">A masked version of the card number.</param>
        /// <param name="EmvTxnCurrencyCode">ISO currency code of the transaction.</param>
        /// <param name="EmvTxnDate">ISO date of the transaction.</param>
        /// <param name="EmvTxnStatusInfo">Status info of the transaction.</param>
        /// <param name="EmvTxnType">Transacrtion type information returned.</param>
        /// <param name="EmvTxnUnpredictableNumber">The UN or unpredicatble number in the transaction process.</param>
        /// <param name="IsCommercialCard">Determines if the card was a commercial card.</param>
        /// <param name="IsContactless">Determines if the card was contactless.</param>
        /// <param name="IsFallback">Determines if fallback was used.</param>
        /// <param name="IsOffline">Determines if the transaction was authorised offline.</param>
        /// <param name="IsVoided">Determines if the transaction was voided.</param>
        /// <param name="ResponseCode">A response code provided by the acquirer.</param>
        /// <param name="ResponseText">The response text returned by the acquirer.</param>
        /// <param name="Result">A text result of the transaction.</param>
        /// <param name="Scheme">A description of the card scheme for the card.</param>
        /// <param name="SignatureRequired">Determines whether a signature was required for legacy systems.</param>
        /// <param name="TerminalId">The terminal id used from the device.</param>
        /// <param name="TotalAmount">The total amount processed.</param>
        /// <param name="TransactionType">The type of transaction processed.</param>
        /// <param name="VerifiedByPin">Determines if the transaction was verified by pin entry.</param>
        public TransactionData(string AdditionalData = default(string), string AuxiliaryData = default(string), string CardType = default(string), string CompletedAt = default(string), string CreatedAt = default(string), string CurrencySymbol = default(string), bool? DeclinedByCard = default(bool?), string EmvAppCryptogram = default(string), string EmvAppExpirationDate = default(string), int? EmvAppTxnCounter = default(int?), string EmvAuthorizedAmount = default(string), string EmvCardholderVerificationResults = default(string), string EmvCountryCode = default(string), string EmvCryptogramInfoData = default(string), string EmvIccAppid = default(string), string EmvInterchangeProfile = default(string), string EmvIssuerAppData = default(string), string EmvPanSeqNum = default(string), string EmvTerminalCapabilities = default(string), string EmvTerminalType = default(string), string EmvTerminalVerificationResults = default(string), string EmvTrack2Equivalent = default(string), string EmvTxnCurrencyCode = default(string), string EmvTxnDate = default(string), string EmvTxnStatusInfo = default(string), string EmvTxnType = default(string), string EmvTxnUnpredictableNumber = default(string), string IsCommercialCard = default(string), string IsContactless = default(string), string IsFallback = default(string), string IsOffline = default(string), string IsVoided = default(string), string ResponseCode = default(string), string ResponseText = default(string), string Result = default(string), string Scheme = default(string), string SignatureRequired = default(string), string TerminalId = default(string), int? TotalAmount = default(int?), string TransactionType = default(string), bool? VerifiedByPin = default(bool?))
        {
            this.AdditionalData = AdditionalData;
            this.AuxiliaryData = AuxiliaryData;
            this.CardType = CardType;
            this.CompletedAt = CompletedAt;
            this.CreatedAt = CreatedAt;
            this.CurrencySymbol = CurrencySymbol;
            this.DeclinedByCard = DeclinedByCard;
            this.EmvAppCryptogram = EmvAppCryptogram;
            this.EmvAppExpirationDate = EmvAppExpirationDate;
            this.EmvAppTxnCounter = EmvAppTxnCounter;
            this.EmvAuthorizedAmount = EmvAuthorizedAmount;
            this.EmvCardholderVerificationResults = EmvCardholderVerificationResults;
            this.EmvCountryCode = EmvCountryCode;
            this.EmvCryptogramInfoData = EmvCryptogramInfoData;
            this.EmvIccAppid = EmvIccAppid;
            this.EmvInterchangeProfile = EmvInterchangeProfile;
            this.EmvIssuerAppData = EmvIssuerAppData;
            this.EmvPanSeqNum = EmvPanSeqNum;
            this.EmvTerminalCapabilities = EmvTerminalCapabilities;
            this.EmvTerminalType = EmvTerminalType;
            this.EmvTerminalVerificationResults = EmvTerminalVerificationResults;
            this.EmvTrack2Equivalent = EmvTrack2Equivalent;
            this.EmvTxnCurrencyCode = EmvTxnCurrencyCode;
            this.EmvTxnDate = EmvTxnDate;
            this.EmvTxnStatusInfo = EmvTxnStatusInfo;
            this.EmvTxnType = EmvTxnType;
            this.EmvTxnUnpredictableNumber = EmvTxnUnpredictableNumber;
            this.IsCommercialCard = IsCommercialCard;
            this.IsContactless = IsContactless;
            this.IsFallback = IsFallback;
            this.IsOffline = IsOffline;
            this.IsVoided = IsVoided;
            this.ResponseCode = ResponseCode;
            this.ResponseText = ResponseText;
            this.Result = Result;
            this.Scheme = Scheme;
            this.SignatureRequired = SignatureRequired;
            this.TerminalId = TerminalId;
            this.TotalAmount = TotalAmount;
            this.TransactionType = TransactionType;
            this.VerifiedByPin = VerifiedByPin;
        }
        
        /// <summary>
        /// additional data provided within the acquirer response
        /// </summary>
        /// <value>additional data provided within the acquirer response</value>
        [DataMember(Name="additional_data", EmitDefaultValue=false)]
        public string AdditionalData { get; set; }

        /// <summary>
        /// Value provided by online processing
        /// </summary>
        /// <value>Value provided by online processing</value>
        [DataMember(Name="auxiliary_data", EmitDefaultValue=false)]
        public string AuxiliaryData { get; set; }

        /// <summary>
        /// The type of card used such as EMV
        /// </summary>
        /// <value>The type of card used such as EMV</value>
        [DataMember(Name="card_type", EmitDefaultValue=false)]
        public string CardType { get; set; }

        /// <summary>
        /// The date and time that the transaction was completed in ISO-8166 format
        /// </summary>
        /// <value>The date and time that the transaction was completed in ISO-8166 format</value>
        [DataMember(Name="completed_at", EmitDefaultValue=false)]
        public string CompletedAt { get; set; }

        /// <summary>
        /// The date and time that the transaction was created in ISO-8166 format
        /// </summary>
        /// <value>The date and time that the transaction was created in ISO-8166 format</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The currency symbol used
        /// </summary>
        /// <value>The currency symbol used</value>
        [DataMember(Name="currency_symbol", EmitDefaultValue=false)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Boolean value should the transaction be declined by the card
        /// </summary>
        /// <value>Boolean value should the transaction be declined by the card</value>
        [DataMember(Name="declined_by_card", EmitDefaultValue=false)]
        public bool? DeclinedByCard { get; set; }

        /// <summary>
        /// Cryptogram used by the card in processing
        /// </summary>
        /// <value>Cryptogram used by the card in processing</value>
        [DataMember(Name="emv_app_cryptogram", EmitDefaultValue=false)]
        public string EmvAppCryptogram { get; set; }

        /// <summary>
        /// Expiry date of the card
        /// </summary>
        /// <value>Expiry date of the card</value>
        [DataMember(Name="emv_app_expiration_date", EmitDefaultValue=false)]
        public string EmvAppExpirationDate { get; set; }

        /// <summary>
        /// A transaction counter, incremented by the device resulting in a transaction number
        /// </summary>
        /// <value>A transaction counter, incremented by the device resulting in a transaction number</value>
        [DataMember(Name="emv_app_txn_counter", EmitDefaultValue=false)]
        public int? EmvAppTxnCounter { get; set; }

        /// <summary>
        /// The amount authorised
        /// </summary>
        /// <value>The amount authorised</value>
        [DataMember(Name="emv_authorized_amount", EmitDefaultValue=false)]
        public string EmvAuthorizedAmount { get; set; }

        /// <summary>
        /// Verification results within the processing scope
        /// </summary>
        /// <value>Verification results within the processing scope</value>
        [DataMember(Name="emv_cardholder_verification_results", EmitDefaultValue=false)]
        public string EmvCardholderVerificationResults { get; set; }

        /// <summary>
        /// A country code returned by the device
        /// </summary>
        /// <value>A country code returned by the device</value>
        [DataMember(Name="emv_country_code", EmitDefaultValue=false)]
        public string EmvCountryCode { get; set; }

        /// <summary>
        /// Cryptogram info returned by the card
        /// </summary>
        /// <value>Cryptogram info returned by the card</value>
        [DataMember(Name="emv_cryptogram_info_data", EmitDefaultValue=false)]
        public string EmvCryptogramInfoData { get; set; }

        /// <summary>
        /// The application id (AID) identifying the card used
        /// </summary>
        /// <value>The application id (AID) identifying the card used</value>
        [DataMember(Name="emv_icc_appid", EmitDefaultValue=false)]
        public string EmvIccAppid { get; set; }

        /// <summary>
        /// The interchange profile used
        /// </summary>
        /// <value>The interchange profile used</value>
        [DataMember(Name="emv_interchange_profile", EmitDefaultValue=false)]
        public string EmvInterchangeProfile { get; set; }

        /// <summary>
        /// Application data provided by the issuer
        /// </summary>
        /// <value>Application data provided by the issuer</value>
        [DataMember(Name="emv_issuer_app_data", EmitDefaultValue=false)]
        public string EmvIssuerAppData { get; set; }

        /// <summary>
        /// Sequence number provided by the card
        /// </summary>
        /// <value>Sequence number provided by the card</value>
        [DataMember(Name="emv_pan_seq_num", EmitDefaultValue=false)]
        public string EmvPanSeqNum { get; set; }

        /// <summary>
        /// Terminal capabilities of the device
        /// </summary>
        /// <value>Terminal capabilities of the device</value>
        [DataMember(Name="emv_terminal_capabilities", EmitDefaultValue=false)]
        public string EmvTerminalCapabilities { get; set; }

        /// <summary>
        /// The terminal type of the device
        /// </summary>
        /// <value>The terminal type of the device</value>
        [DataMember(Name="emv_terminal_type", EmitDefaultValue=false)]
        public string EmvTerminalType { get; set; }

        /// <summary>
        /// TVR provided by the verification process of the transaction
        /// </summary>
        /// <value>TVR provided by the verification process of the transaction</value>
        [DataMember(Name="emv_terminal_verification_results", EmitDefaultValue=false)]
        public string EmvTerminalVerificationResults { get; set; }

        /// <summary>
        /// A masked version of the card number
        /// </summary>
        /// <value>A masked version of the card number</value>
        [DataMember(Name="emv_track2_equivalent", EmitDefaultValue=false)]
        public string EmvTrack2Equivalent { get; set; }

        /// <summary>
        /// ISO currency code of the transaction
        /// </summary>
        /// <value>ISO currency code of the transaction</value>
        [DataMember(Name="emv_txn_currency_code", EmitDefaultValue=false)]
        public string EmvTxnCurrencyCode { get; set; }

        /// <summary>
        /// ISO date of the transaction
        /// </summary>
        /// <value>ISO date of the transaction</value>
        [DataMember(Name="emv_txn_date", EmitDefaultValue=false)]
        public string EmvTxnDate { get; set; }

        /// <summary>
        /// Status info of the transaction
        /// </summary>
        /// <value>Status info of the transaction</value>
        [DataMember(Name="emv_txn_status_info", EmitDefaultValue=false)]
        public string EmvTxnStatusInfo { get; set; }

        /// <summary>
        /// Transacrtion type information returned
        /// </summary>
        /// <value>Transacrtion type information returned</value>
        [DataMember(Name="emv_txn_type", EmitDefaultValue=false)]
        public string EmvTxnType { get; set; }

        /// <summary>
        /// The UN or unpredicatble number in the transaction process
        /// </summary>
        /// <value>The UN or unpredicatble number in the transaction process</value>
        [DataMember(Name="emv_txn_unpredictable_number", EmitDefaultValue=false)]
        public string EmvTxnUnpredictableNumber { get; set; }

        /// <summary>
        /// Determines if the card was a commercial card
        /// </summary>
        /// <value>Determines if the card was a commercial card</value>
        [DataMember(Name="is_commercial_card", EmitDefaultValue=false)]
        public string IsCommercialCard { get; set; }

        /// <summary>
        /// Determines if the card was contactless
        /// </summary>
        /// <value>Determines if the card was contactless</value>
        [DataMember(Name="is_contactless", EmitDefaultValue=false)]
        public string IsContactless { get; set; }

        /// <summary>
        /// Determines if fallback was used
        /// </summary>
        /// <value>Determines if fallback was used</value>
        [DataMember(Name="is_fallback", EmitDefaultValue=false)]
        public string IsFallback { get; set; }

        /// <summary>
        /// Determines if the transaction was authorised offline
        /// </summary>
        /// <value>Determines if the transaction was authorised offline</value>
        [DataMember(Name="is_offline", EmitDefaultValue=false)]
        public string IsOffline { get; set; }

        /// <summary>
        /// Determines if the transaction was voided
        /// </summary>
        /// <value>Determines if the transaction was voided</value>
        [DataMember(Name="is_voided", EmitDefaultValue=false)]
        public string IsVoided { get; set; }

        /// <summary>
        /// A response code provided by the acquirer
        /// </summary>
        /// <value>A response code provided by the acquirer</value>
        [DataMember(Name="response_code", EmitDefaultValue=false)]
        public string ResponseCode { get; set; }

        /// <summary>
        /// The response text returned by the acquirer
        /// </summary>
        /// <value>The response text returned by the acquirer</value>
        [DataMember(Name="response_text", EmitDefaultValue=false)]
        public string ResponseText { get; set; }

        /// <summary>
        /// A text result of the transaction
        /// </summary>
        /// <value>A text result of the transaction</value>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public string Result { get; set; }

        /// <summary>
        /// A description of the card scheme for the card
        /// </summary>
        /// <value>A description of the card scheme for the card</value>
        [DataMember(Name="scheme", EmitDefaultValue=false)]
        public string Scheme { get; set; }

        /// <summary>
        /// Determines whether a signature was required for legacy systems
        /// </summary>
        /// <value>Determines whether a signature was required for legacy systems</value>
        [DataMember(Name="signature_required", EmitDefaultValue=false)]
        public string SignatureRequired { get; set; }

        /// <summary>
        /// The terminal id used from the device
        /// </summary>
        /// <value>The terminal id used from the device</value>
        [DataMember(Name="terminal_id", EmitDefaultValue=false)]
        public string TerminalId { get; set; }

        /// <summary>
        /// The total amount processed
        /// </summary>
        /// <value>The total amount processed</value>
        [DataMember(Name="total_amount", EmitDefaultValue=false)]
        public int? TotalAmount { get; set; }

        /// <summary>
        /// The type of transaction processed
        /// </summary>
        /// <value>The type of transaction processed</value>
        [DataMember(Name="transaction_type", EmitDefaultValue=false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Determines if the transaction was verified by pin entry
        /// </summary>
        /// <value>Determines if the transaction was verified by pin entry</value>
        [DataMember(Name="verified_by_pin", EmitDefaultValue=false)]
        public bool? VerifiedByPin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionData {\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  AuxiliaryData: ").Append(AuxiliaryData).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  DeclinedByCard: ").Append(DeclinedByCard).Append("\n");
            sb.Append("  EmvAppCryptogram: ").Append(EmvAppCryptogram).Append("\n");
            sb.Append("  EmvAppExpirationDate: ").Append(EmvAppExpirationDate).Append("\n");
            sb.Append("  EmvAppTxnCounter: ").Append(EmvAppTxnCounter).Append("\n");
            sb.Append("  EmvAuthorizedAmount: ").Append(EmvAuthorizedAmount).Append("\n");
            sb.Append("  EmvCardholderVerificationResults: ").Append(EmvCardholderVerificationResults).Append("\n");
            sb.Append("  EmvCountryCode: ").Append(EmvCountryCode).Append("\n");
            sb.Append("  EmvCryptogramInfoData: ").Append(EmvCryptogramInfoData).Append("\n");
            sb.Append("  EmvIccAppid: ").Append(EmvIccAppid).Append("\n");
            sb.Append("  EmvInterchangeProfile: ").Append(EmvInterchangeProfile).Append("\n");
            sb.Append("  EmvIssuerAppData: ").Append(EmvIssuerAppData).Append("\n");
            sb.Append("  EmvPanSeqNum: ").Append(EmvPanSeqNum).Append("\n");
            sb.Append("  EmvTerminalCapabilities: ").Append(EmvTerminalCapabilities).Append("\n");
            sb.Append("  EmvTerminalType: ").Append(EmvTerminalType).Append("\n");
            sb.Append("  EmvTerminalVerificationResults: ").Append(EmvTerminalVerificationResults).Append("\n");
            sb.Append("  EmvTrack2Equivalent: ").Append(EmvTrack2Equivalent).Append("\n");
            sb.Append("  EmvTxnCurrencyCode: ").Append(EmvTxnCurrencyCode).Append("\n");
            sb.Append("  EmvTxnDate: ").Append(EmvTxnDate).Append("\n");
            sb.Append("  EmvTxnStatusInfo: ").Append(EmvTxnStatusInfo).Append("\n");
            sb.Append("  EmvTxnType: ").Append(EmvTxnType).Append("\n");
            sb.Append("  EmvTxnUnpredictableNumber: ").Append(EmvTxnUnpredictableNumber).Append("\n");
            sb.Append("  IsCommercialCard: ").Append(IsCommercialCard).Append("\n");
            sb.Append("  IsContactless: ").Append(IsContactless).Append("\n");
            sb.Append("  IsFallback: ").Append(IsFallback).Append("\n");
            sb.Append("  IsOffline: ").Append(IsOffline).Append("\n");
            sb.Append("  IsVoided: ").Append(IsVoided).Append("\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  ResponseText: ").Append(ResponseText).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Scheme: ").Append(Scheme).Append("\n");
            sb.Append("  SignatureRequired: ").Append(SignatureRequired).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  VerifiedByPin: ").Append(VerifiedByPin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionData);
        }

        /// <summary>
        /// Returns true if TransactionData instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalData == input.AdditionalData ||
                    (this.AdditionalData != null &&
                    this.AdditionalData.Equals(input.AdditionalData))
                ) && 
                (
                    this.AuxiliaryData == input.AuxiliaryData ||
                    (this.AuxiliaryData != null &&
                    this.AuxiliaryData.Equals(input.AuxiliaryData))
                ) && 
                (
                    this.CardType == input.CardType ||
                    (this.CardType != null &&
                    this.CardType.Equals(input.CardType))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) && 
                (
                    this.DeclinedByCard == input.DeclinedByCard ||
                    (this.DeclinedByCard != null &&
                    this.DeclinedByCard.Equals(input.DeclinedByCard))
                ) && 
                (
                    this.EmvAppCryptogram == input.EmvAppCryptogram ||
                    (this.EmvAppCryptogram != null &&
                    this.EmvAppCryptogram.Equals(input.EmvAppCryptogram))
                ) && 
                (
                    this.EmvAppExpirationDate == input.EmvAppExpirationDate ||
                    (this.EmvAppExpirationDate != null &&
                    this.EmvAppExpirationDate.Equals(input.EmvAppExpirationDate))
                ) && 
                (
                    this.EmvAppTxnCounter == input.EmvAppTxnCounter ||
                    (this.EmvAppTxnCounter != null &&
                    this.EmvAppTxnCounter.Equals(input.EmvAppTxnCounter))
                ) && 
                (
                    this.EmvAuthorizedAmount == input.EmvAuthorizedAmount ||
                    (this.EmvAuthorizedAmount != null &&
                    this.EmvAuthorizedAmount.Equals(input.EmvAuthorizedAmount))
                ) && 
                (
                    this.EmvCardholderVerificationResults == input.EmvCardholderVerificationResults ||
                    (this.EmvCardholderVerificationResults != null &&
                    this.EmvCardholderVerificationResults.Equals(input.EmvCardholderVerificationResults))
                ) && 
                (
                    this.EmvCountryCode == input.EmvCountryCode ||
                    (this.EmvCountryCode != null &&
                    this.EmvCountryCode.Equals(input.EmvCountryCode))
                ) && 
                (
                    this.EmvCryptogramInfoData == input.EmvCryptogramInfoData ||
                    (this.EmvCryptogramInfoData != null &&
                    this.EmvCryptogramInfoData.Equals(input.EmvCryptogramInfoData))
                ) && 
                (
                    this.EmvIccAppid == input.EmvIccAppid ||
                    (this.EmvIccAppid != null &&
                    this.EmvIccAppid.Equals(input.EmvIccAppid))
                ) && 
                (
                    this.EmvInterchangeProfile == input.EmvInterchangeProfile ||
                    (this.EmvInterchangeProfile != null &&
                    this.EmvInterchangeProfile.Equals(input.EmvInterchangeProfile))
                ) && 
                (
                    this.EmvIssuerAppData == input.EmvIssuerAppData ||
                    (this.EmvIssuerAppData != null &&
                    this.EmvIssuerAppData.Equals(input.EmvIssuerAppData))
                ) && 
                (
                    this.EmvPanSeqNum == input.EmvPanSeqNum ||
                    (this.EmvPanSeqNum != null &&
                    this.EmvPanSeqNum.Equals(input.EmvPanSeqNum))
                ) && 
                (
                    this.EmvTerminalCapabilities == input.EmvTerminalCapabilities ||
                    (this.EmvTerminalCapabilities != null &&
                    this.EmvTerminalCapabilities.Equals(input.EmvTerminalCapabilities))
                ) && 
                (
                    this.EmvTerminalType == input.EmvTerminalType ||
                    (this.EmvTerminalType != null &&
                    this.EmvTerminalType.Equals(input.EmvTerminalType))
                ) && 
                (
                    this.EmvTerminalVerificationResults == input.EmvTerminalVerificationResults ||
                    (this.EmvTerminalVerificationResults != null &&
                    this.EmvTerminalVerificationResults.Equals(input.EmvTerminalVerificationResults))
                ) && 
                (
                    this.EmvTrack2Equivalent == input.EmvTrack2Equivalent ||
                    (this.EmvTrack2Equivalent != null &&
                    this.EmvTrack2Equivalent.Equals(input.EmvTrack2Equivalent))
                ) && 
                (
                    this.EmvTxnCurrencyCode == input.EmvTxnCurrencyCode ||
                    (this.EmvTxnCurrencyCode != null &&
                    this.EmvTxnCurrencyCode.Equals(input.EmvTxnCurrencyCode))
                ) && 
                (
                    this.EmvTxnDate == input.EmvTxnDate ||
                    (this.EmvTxnDate != null &&
                    this.EmvTxnDate.Equals(input.EmvTxnDate))
                ) && 
                (
                    this.EmvTxnStatusInfo == input.EmvTxnStatusInfo ||
                    (this.EmvTxnStatusInfo != null &&
                    this.EmvTxnStatusInfo.Equals(input.EmvTxnStatusInfo))
                ) && 
                (
                    this.EmvTxnType == input.EmvTxnType ||
                    (this.EmvTxnType != null &&
                    this.EmvTxnType.Equals(input.EmvTxnType))
                ) && 
                (
                    this.EmvTxnUnpredictableNumber == input.EmvTxnUnpredictableNumber ||
                    (this.EmvTxnUnpredictableNumber != null &&
                    this.EmvTxnUnpredictableNumber.Equals(input.EmvTxnUnpredictableNumber))
                ) && 
                (
                    this.IsCommercialCard == input.IsCommercialCard ||
                    (this.IsCommercialCard != null &&
                    this.IsCommercialCard.Equals(input.IsCommercialCard))
                ) && 
                (
                    this.IsContactless == input.IsContactless ||
                    (this.IsContactless != null &&
                    this.IsContactless.Equals(input.IsContactless))
                ) && 
                (
                    this.IsFallback == input.IsFallback ||
                    (this.IsFallback != null &&
                    this.IsFallback.Equals(input.IsFallback))
                ) && 
                (
                    this.IsOffline == input.IsOffline ||
                    (this.IsOffline != null &&
                    this.IsOffline.Equals(input.IsOffline))
                ) && 
                (
                    this.IsVoided == input.IsVoided ||
                    (this.IsVoided != null &&
                    this.IsVoided.Equals(input.IsVoided))
                ) && 
                (
                    this.ResponseCode == input.ResponseCode ||
                    (this.ResponseCode != null &&
                    this.ResponseCode.Equals(input.ResponseCode))
                ) && 
                (
                    this.ResponseText == input.ResponseText ||
                    (this.ResponseText != null &&
                    this.ResponseText.Equals(input.ResponseText))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.Scheme == input.Scheme ||
                    (this.Scheme != null &&
                    this.Scheme.Equals(input.Scheme))
                ) && 
                (
                    this.SignatureRequired == input.SignatureRequired ||
                    (this.SignatureRequired != null &&
                    this.SignatureRequired.Equals(input.SignatureRequired))
                ) && 
                (
                    this.TerminalId == input.TerminalId ||
                    (this.TerminalId != null &&
                    this.TerminalId.Equals(input.TerminalId))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.VerifiedByPin == input.VerifiedByPin ||
                    (this.VerifiedByPin != null &&
                    this.VerifiedByPin.Equals(input.VerifiedByPin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalData != null)
                    hashCode = hashCode * 59 + this.AdditionalData.GetHashCode();
                if (this.AuxiliaryData != null)
                    hashCode = hashCode * 59 + this.AuxiliaryData.GetHashCode();
                if (this.CardType != null)
                    hashCode = hashCode * 59 + this.CardType.GetHashCode();
                if (this.CompletedAt != null)
                    hashCode = hashCode * 59 + this.CompletedAt.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CurrencySymbol != null)
                    hashCode = hashCode * 59 + this.CurrencySymbol.GetHashCode();
                if (this.DeclinedByCard != null)
                    hashCode = hashCode * 59 + this.DeclinedByCard.GetHashCode();
                if (this.EmvAppCryptogram != null)
                    hashCode = hashCode * 59 + this.EmvAppCryptogram.GetHashCode();
                if (this.EmvAppExpirationDate != null)
                    hashCode = hashCode * 59 + this.EmvAppExpirationDate.GetHashCode();
                if (this.EmvAppTxnCounter != null)
                    hashCode = hashCode * 59 + this.EmvAppTxnCounter.GetHashCode();
                if (this.EmvAuthorizedAmount != null)
                    hashCode = hashCode * 59 + this.EmvAuthorizedAmount.GetHashCode();
                if (this.EmvCardholderVerificationResults != null)
                    hashCode = hashCode * 59 + this.EmvCardholderVerificationResults.GetHashCode();
                if (this.EmvCountryCode != null)
                    hashCode = hashCode * 59 + this.EmvCountryCode.GetHashCode();
                if (this.EmvCryptogramInfoData != null)
                    hashCode = hashCode * 59 + this.EmvCryptogramInfoData.GetHashCode();
                if (this.EmvIccAppid != null)
                    hashCode = hashCode * 59 + this.EmvIccAppid.GetHashCode();
                if (this.EmvInterchangeProfile != null)
                    hashCode = hashCode * 59 + this.EmvInterchangeProfile.GetHashCode();
                if (this.EmvIssuerAppData != null)
                    hashCode = hashCode * 59 + this.EmvIssuerAppData.GetHashCode();
                if (this.EmvPanSeqNum != null)
                    hashCode = hashCode * 59 + this.EmvPanSeqNum.GetHashCode();
                if (this.EmvTerminalCapabilities != null)
                    hashCode = hashCode * 59 + this.EmvTerminalCapabilities.GetHashCode();
                if (this.EmvTerminalType != null)
                    hashCode = hashCode * 59 + this.EmvTerminalType.GetHashCode();
                if (this.EmvTerminalVerificationResults != null)
                    hashCode = hashCode * 59 + this.EmvTerminalVerificationResults.GetHashCode();
                if (this.EmvTrack2Equivalent != null)
                    hashCode = hashCode * 59 + this.EmvTrack2Equivalent.GetHashCode();
                if (this.EmvTxnCurrencyCode != null)
                    hashCode = hashCode * 59 + this.EmvTxnCurrencyCode.GetHashCode();
                if (this.EmvTxnDate != null)
                    hashCode = hashCode * 59 + this.EmvTxnDate.GetHashCode();
                if (this.EmvTxnStatusInfo != null)
                    hashCode = hashCode * 59 + this.EmvTxnStatusInfo.GetHashCode();
                if (this.EmvTxnType != null)
                    hashCode = hashCode * 59 + this.EmvTxnType.GetHashCode();
                if (this.EmvTxnUnpredictableNumber != null)
                    hashCode = hashCode * 59 + this.EmvTxnUnpredictableNumber.GetHashCode();
                if (this.IsCommercialCard != null)
                    hashCode = hashCode * 59 + this.IsCommercialCard.GetHashCode();
                if (this.IsContactless != null)
                    hashCode = hashCode * 59 + this.IsContactless.GetHashCode();
                if (this.IsFallback != null)
                    hashCode = hashCode * 59 + this.IsFallback.GetHashCode();
                if (this.IsOffline != null)
                    hashCode = hashCode * 59 + this.IsOffline.GetHashCode();
                if (this.IsVoided != null)
                    hashCode = hashCode * 59 + this.IsVoided.GetHashCode();
                if (this.ResponseCode != null)
                    hashCode = hashCode * 59 + this.ResponseCode.GetHashCode();
                if (this.ResponseText != null)
                    hashCode = hashCode * 59 + this.ResponseText.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.Scheme != null)
                    hashCode = hashCode * 59 + this.Scheme.GetHashCode();
                if (this.SignatureRequired != null)
                    hashCode = hashCode * 59 + this.SignatureRequired.GetHashCode();
                if (this.TerminalId != null)
                    hashCode = hashCode * 59 + this.TerminalId.GetHashCode();
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.VerifiedByPin != null)
                    hashCode = hashCode * 59 + this.VerifiedByPin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
