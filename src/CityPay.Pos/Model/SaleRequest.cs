/* 
 * CityPay POS API
 *
 * CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API is available from https://github.com/citypay/citypay-pos-api  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CityPay.Pos.Client.SwaggerDateConverter;

namespace CityPay.Pos.Model
{
    /// <summary>
    /// A request for a sale
    /// </summary>
    [DataContract]
    public partial class SaleRequest :  IEquatable<SaleRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SaleRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SaleRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SaleRequest" /> class.
        /// </summary>
        /// <param name="Device">The name of the target device used by the API. The device will be setup prior to the sale but allows targeting of multiple devices. (required).</param>
        /// <param name="Amount">The amount to process in the lowest denomination and in the base currency of the device. 4798 for instance would process the transaction for £47.98 (required).</param>
        /// <param name="Identifier">An identifier or reference for the sale as taken by the point of sale system. This should be used to cross reference transactions after it has processed. The value should be unique and will be used to check on the processing of the transaction. (required).</param>
        public SaleRequest(string Device = default(string), int? Amount = default(int?), string Identifier = default(string))
        {
            // to ensure "Device" is required (not null)
            if (Device == null)
            {
                throw new InvalidDataException("Device is a required property for SaleRequest and cannot be null");
            }
            else
            {
                this.Device = Device;
            }
            // to ensure "Amount" is required (not null)
            if (Amount == null)
            {
                throw new InvalidDataException("Amount is a required property for SaleRequest and cannot be null");
            }
            else
            {
                this.Amount = Amount;
            }
            // to ensure "Identifier" is required (not null)
            if (Identifier == null)
            {
                throw new InvalidDataException("Identifier is a required property for SaleRequest and cannot be null");
            }
            else
            {
                this.Identifier = Identifier;
            }
        }
        
        /// <summary>
        /// The name of the target device used by the API. The device will be setup prior to the sale but allows targeting of multiple devices.
        /// </summary>
        /// <value>The name of the target device used by the API. The device will be setup prior to the sale but allows targeting of multiple devices.</value>
        [DataMember(Name="device", EmitDefaultValue=false)]
        public string Device { get; set; }

        /// <summary>
        /// The amount to process in the lowest denomination and in the base currency of the device. 4798 for instance would process the transaction for £47.98
        /// </summary>
        /// <value>The amount to process in the lowest denomination and in the base currency of the device. 4798 for instance would process the transaction for £47.98</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public int? Amount { get; set; }

        /// <summary>
        /// An identifier or reference for the sale as taken by the point of sale system. This should be used to cross reference transactions after it has processed. The value should be unique and will be used to check on the processing of the transaction.
        /// </summary>
        /// <value>An identifier or reference for the sale as taken by the point of sale system. This should be used to cross reference transactions after it has processed. The value should be unique and will be used to check on the processing of the transaction.</value>
        [DataMember(Name="identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SaleRequest {\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SaleRequest);
        }

        /// <summary>
        /// Returns true if SaleRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SaleRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SaleRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Device == input.Device ||
                    (this.Device != null &&
                    this.Device.Equals(input.Device))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Device != null)
                    hashCode = hashCode * 59 + this.Device.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
