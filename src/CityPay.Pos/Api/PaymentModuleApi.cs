/* 
 * CityPay POS API
 *
 * CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API is available from https://github.com/citypay/citypay-pos-api  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CityPay.Pos.Client;
using CityPay.Pos.Model;

namespace CityPay.Pos.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentModuleApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Receipt Print
        /// </summary>
        /// <remarks>
        /// Reprint a merchant or customer receipt for a transaction that exists on the device (i.e. has not been cleared by End of Day process). 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TransactionResult</returns>
        TransactionResult Receipt (TransactionProgress body = null);

        /// <summary>
        /// Receipt Print
        /// </summary>
        /// <remarks>
        /// Reprint a merchant or customer receipt for a transaction that exists on the device (i.e. has not been cleared by End of Day process). 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TransactionResult</returns>
        ApiResponse<TransactionResult> ReceiptWithHttpInfo (TransactionProgress body = null);
        /// <summary>
        /// Refund Transaction
        /// </summary>
        /// <remarks>
        /// Initiates a new refund to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SaleResponse</returns>
        SaleResponse Refund (SaleRequest body);

        /// <summary>
        /// Refund Transaction
        /// </summary>
        /// <remarks>
        /// Initiates a new refund to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SaleResponse</returns>
        ApiResponse<SaleResponse> RefundWithHttpInfo (SaleRequest body);
        /// <summary>
        /// Reversal Tranasction
        /// </summary>
        /// <remarks>
        /// Initiates a reversal to a device. No confirmation is made and the transaction reversal process is run. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SaleResponse</returns>
        SaleResponse Reversal (ReversalRequest body);

        /// <summary>
        /// Reversal Tranasction
        /// </summary>
        /// <remarks>
        /// Initiates a reversal to a device. No confirmation is made and the transaction reversal process is run. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SaleResponse</returns>
        ApiResponse<SaleResponse> ReversalWithHttpInfo (ReversalRequest body);
        /// <summary>
        /// Sale Transaction
        /// </summary>
        /// <remarks>
        /// Initiates a new sale to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SaleResponse</returns>
        SaleResponse Sale (SaleRequest body);

        /// <summary>
        /// Sale Transaction
        /// </summary>
        /// <remarks>
        /// Initiates a new sale to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SaleResponse</returns>
        ApiResponse<SaleResponse> SaleWithHttpInfo (SaleRequest body);
        /// <summary>
        /// Transaction Status
        /// </summary>
        /// <remarks>
        /// Request the status of a transaction in progress or a complete transaction using the identifier as the reference. Depending on the state of the transaction, the response will indicate if it is not found, in progress (and the current stage in the transaction workflow) or complete (with all transaction data). 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TransactionResult</returns>
        TransactionResult Transaction (TransactionProgress body = null);

        /// <summary>
        /// Transaction Status
        /// </summary>
        /// <remarks>
        /// Request the status of a transaction in progress or a complete transaction using the identifier as the reference. Depending on the state of the transaction, the response will indicate if it is not found, in progress (and the current stage in the transaction workflow) or complete (with all transaction data). 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TransactionResult</returns>
        ApiResponse<TransactionResult> TransactionWithHttpInfo (TransactionProgress body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Receipt Print
        /// </summary>
        /// <remarks>
        /// Reprint a merchant or customer receipt for a transaction that exists on the device (i.e. has not been cleared by End of Day process). 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TransactionResult</returns>
        System.Threading.Tasks.Task<TransactionResult> ReceiptAsync (TransactionProgress body = null);

        /// <summary>
        /// Receipt Print
        /// </summary>
        /// <remarks>
        /// Reprint a merchant or customer receipt for a transaction that exists on the device (i.e. has not been cleared by End of Day process). 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TransactionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResult>> ReceiptAsyncWithHttpInfo (TransactionProgress body = null);
        /// <summary>
        /// Refund Transaction
        /// </summary>
        /// <remarks>
        /// Initiates a new refund to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SaleResponse</returns>
        System.Threading.Tasks.Task<SaleResponse> RefundAsync (SaleRequest body);

        /// <summary>
        /// Refund Transaction
        /// </summary>
        /// <remarks>
        /// Initiates a new refund to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SaleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaleResponse>> RefundAsyncWithHttpInfo (SaleRequest body);
        /// <summary>
        /// Reversal Tranasction
        /// </summary>
        /// <remarks>
        /// Initiates a reversal to a device. No confirmation is made and the transaction reversal process is run. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SaleResponse</returns>
        System.Threading.Tasks.Task<SaleResponse> ReversalAsync (ReversalRequest body);

        /// <summary>
        /// Reversal Tranasction
        /// </summary>
        /// <remarks>
        /// Initiates a reversal to a device. No confirmation is made and the transaction reversal process is run. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SaleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaleResponse>> ReversalAsyncWithHttpInfo (ReversalRequest body);
        /// <summary>
        /// Sale Transaction
        /// </summary>
        /// <remarks>
        /// Initiates a new sale to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SaleResponse</returns>
        System.Threading.Tasks.Task<SaleResponse> SaleAsync (SaleRequest body);

        /// <summary>
        /// Sale Transaction
        /// </summary>
        /// <remarks>
        /// Initiates a new sale to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SaleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaleResponse>> SaleAsyncWithHttpInfo (SaleRequest body);
        /// <summary>
        /// Transaction Status
        /// </summary>
        /// <remarks>
        /// Request the status of a transaction in progress or a complete transaction using the identifier as the reference. Depending on the state of the transaction, the response will indicate if it is not found, in progress (and the current stage in the transaction workflow) or complete (with all transaction data). 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TransactionResult</returns>
        System.Threading.Tasks.Task<TransactionResult> TransactionAsync (TransactionProgress body = null);

        /// <summary>
        /// Transaction Status
        /// </summary>
        /// <remarks>
        /// Request the status of a transaction in progress or a complete transaction using the identifier as the reference. Depending on the state of the transaction, the response will indicate if it is not found, in progress (and the current stage in the transaction workflow) or complete (with all transaction data). 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TransactionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResult>> TransactionAsyncWithHttpInfo (TransactionProgress body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentModuleApi : IPaymentModuleApi
    {
        private CityPay.Pos.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentModuleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentModuleApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = CityPay.Pos.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentModuleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentModuleApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CityPay.Pos.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CityPay.Pos.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Receipt Print Reprint a merchant or customer receipt for a transaction that exists on the device (i.e. has not been cleared by End of Day process). 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TransactionResult</returns>
        public TransactionResult Receipt (TransactionProgress body = null)
        {
             ApiResponse<TransactionResult> localVarResponse = ReceiptWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Receipt Print Reprint a merchant or customer receipt for a transaction that exists on the device (i.e. has not been cleared by End of Day process). 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TransactionResult</returns>
        public ApiResponse< TransactionResult > ReceiptWithHttpInfo (TransactionProgress body = null)
        {

            var localVarPath = "/receipt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Receipt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResult)));
        }

        /// <summary>
        /// Receipt Print Reprint a merchant or customer receipt for a transaction that exists on the device (i.e. has not been cleared by End of Day process). 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TransactionResult</returns>
        public async System.Threading.Tasks.Task<TransactionResult> ReceiptAsync (TransactionProgress body = null)
        {
             ApiResponse<TransactionResult> localVarResponse = await ReceiptAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Receipt Print Reprint a merchant or customer receipt for a transaction that exists on the device (i.e. has not been cleared by End of Day process). 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TransactionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResult>> ReceiptAsyncWithHttpInfo (TransactionProgress body = null)
        {

            var localVarPath = "/receipt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Receipt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResult)));
        }

        /// <summary>
        /// Refund Transaction Initiates a new refund to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SaleResponse</returns>
        public SaleResponse Refund (SaleRequest body)
        {
             ApiResponse<SaleResponse> localVarResponse = RefundWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Refund Transaction Initiates a new refund to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SaleResponse</returns>
        public ApiResponse< SaleResponse > RefundWithHttpInfo (SaleRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentModuleApi->Refund");

            var localVarPath = "/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Refund", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaleResponse)));
        }

        /// <summary>
        /// Refund Transaction Initiates a new refund to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SaleResponse</returns>
        public async System.Threading.Tasks.Task<SaleResponse> RefundAsync (SaleRequest body)
        {
             ApiResponse<SaleResponse> localVarResponse = await RefundAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Refund Transaction Initiates a new refund to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SaleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaleResponse>> RefundAsyncWithHttpInfo (SaleRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentModuleApi->Refund");

            var localVarPath = "/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Refund", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaleResponse)));
        }

        /// <summary>
        /// Reversal Tranasction Initiates a reversal to a device. No confirmation is made and the transaction reversal process is run. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SaleResponse</returns>
        public SaleResponse Reversal (ReversalRequest body)
        {
             ApiResponse<SaleResponse> localVarResponse = ReversalWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reversal Tranasction Initiates a reversal to a device. No confirmation is made and the transaction reversal process is run. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SaleResponse</returns>
        public ApiResponse< SaleResponse > ReversalWithHttpInfo (ReversalRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentModuleApi->Reversal");

            var localVarPath = "/reversal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Reversal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaleResponse)));
        }

        /// <summary>
        /// Reversal Tranasction Initiates a reversal to a device. No confirmation is made and the transaction reversal process is run. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SaleResponse</returns>
        public async System.Threading.Tasks.Task<SaleResponse> ReversalAsync (ReversalRequest body)
        {
             ApiResponse<SaleResponse> localVarResponse = await ReversalAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reversal Tranasction Initiates a reversal to a device. No confirmation is made and the transaction reversal process is run. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SaleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaleResponse>> ReversalAsyncWithHttpInfo (ReversalRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentModuleApi->Reversal");

            var localVarPath = "/reversal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Reversal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaleResponse)));
        }

        /// <summary>
        /// Sale Transaction Initiates a new sale to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SaleResponse</returns>
        public SaleResponse Sale (SaleRequest body)
        {
             ApiResponse<SaleResponse> localVarResponse = SaleWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sale Transaction Initiates a new sale to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SaleResponse</returns>
        public ApiResponse< SaleResponse > SaleWithHttpInfo (SaleRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentModuleApi->Sale");

            var localVarPath = "/sale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Sale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaleResponse)));
        }

        /// <summary>
        /// Sale Transaction Initiates a new sale to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SaleResponse</returns>
        public async System.Threading.Tasks.Task<SaleResponse> SaleAsync (SaleRequest body)
        {
             ApiResponse<SaleResponse> localVarResponse = await SaleAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sale Transaction Initiates a new sale to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SaleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaleResponse>> SaleAsyncWithHttpInfo (SaleRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentModuleApi->Sale");

            var localVarPath = "/sale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Sale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaleResponse)));
        }

        /// <summary>
        /// Transaction Status Request the status of a transaction in progress or a complete transaction using the identifier as the reference. Depending on the state of the transaction, the response will indicate if it is not found, in progress (and the current stage in the transaction workflow) or complete (with all transaction data). 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TransactionResult</returns>
        public TransactionResult Transaction (TransactionProgress body = null)
        {
             ApiResponse<TransactionResult> localVarResponse = TransactionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transaction Status Request the status of a transaction in progress or a complete transaction using the identifier as the reference. Depending on the state of the transaction, the response will indicate if it is not found, in progress (and the current stage in the transaction workflow) or complete (with all transaction data). 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TransactionResult</returns>
        public ApiResponse< TransactionResult > TransactionWithHttpInfo (TransactionProgress body = null)
        {

            var localVarPath = "/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResult)));
        }

        /// <summary>
        /// Transaction Status Request the status of a transaction in progress or a complete transaction using the identifier as the reference. Depending on the state of the transaction, the response will indicate if it is not found, in progress (and the current stage in the transaction workflow) or complete (with all transaction data). 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TransactionResult</returns>
        public async System.Threading.Tasks.Task<TransactionResult> TransactionAsync (TransactionProgress body = null)
        {
             ApiResponse<TransactionResult> localVarResponse = await TransactionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transaction Status Request the status of a transaction in progress or a complete transaction using the identifier as the reference. Depending on the state of the transaction, the response will indicate if it is not found, in progress (and the current stage in the transaction workflow) or complete (with all transaction data). 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TransactionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResult>> TransactionAsyncWithHttpInfo (TransactionProgress body = null)
        {

            var localVarPath = "/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResult)));
        }

    }
}
