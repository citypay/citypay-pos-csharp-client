/* 
 * CityPay POS API
 *
 * CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API is available from https://github.com/citypay/citypay-pos-api  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CityPay.Pos.Client;
using CityPay.Pos.Model;

namespace CityPay.Pos.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceModuleApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Device Information
        /// </summary>
        /// <remarks>
        /// Obtains information regarding the device and to review the current status of a device such as the battery charge, serial number and device type. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>DeviceInfo</returns>
        DeviceInfo DeviceInfo (string deviceId);

        /// <summary>
        /// Device Information
        /// </summary>
        /// <remarks>
        /// Obtains information regarding the device and to review the current status of a device such as the battery charge, serial number and device type. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>ApiResponse of DeviceInfo</returns>
        ApiResponse<DeviceInfo> DeviceInfoWithHttpInfo (string deviceId);
        /// <summary>
        /// Device Ping
        /// </summary>
        /// <remarks>
        /// To monitor or to check whether a device is available, the host can send a simple &#x60;GET&#x60; request to the URL at &#x60;/device/{deviceId}/ping&#x60; to see if the device is responding and available. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>Result</returns>
        Result Ping (string deviceId);

        /// <summary>
        /// Device Ping
        /// </summary>
        /// <remarks>
        /// To monitor or to check whether a device is available, the host can send a simple &#x60;GET&#x60; request to the URL at &#x60;/device/{deviceId}/ping&#x60; to see if the device is responding and available. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>ApiResponse of Result</returns>
        ApiResponse<Result> PingWithHttpInfo (string deviceId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Device Information
        /// </summary>
        /// <remarks>
        /// Obtains information regarding the device and to review the current status of a device such as the battery charge, serial number and device type. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>Task of DeviceInfo</returns>
        System.Threading.Tasks.Task<DeviceInfo> DeviceInfoAsync (string deviceId);

        /// <summary>
        /// Device Information
        /// </summary>
        /// <remarks>
        /// Obtains information regarding the device and to review the current status of a device such as the battery charge, serial number and device type. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>Task of ApiResponse (DeviceInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceInfo>> DeviceInfoAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// Device Ping
        /// </summary>
        /// <remarks>
        /// To monitor or to check whether a device is available, the host can send a simple &#x60;GET&#x60; request to the URL at &#x60;/device/{deviceId}/ping&#x60; to see if the device is responding and available. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>Task of Result</returns>
        System.Threading.Tasks.Task<Result> PingAsync (string deviceId);

        /// <summary>
        /// Device Ping
        /// </summary>
        /// <remarks>
        /// To monitor or to check whether a device is available, the host can send a simple &#x60;GET&#x60; request to the URL at &#x60;/device/{deviceId}/ping&#x60; to see if the device is responding and available. 
        /// </remarks>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>Task of ApiResponse (Result)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result>> PingAsyncWithHttpInfo (string deviceId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeviceModuleApi : IDeviceModuleApi
    {
        private CityPay.Pos.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceModuleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceModuleApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = CityPay.Pos.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceModuleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeviceModuleApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CityPay.Pos.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CityPay.Pos.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Device Information Obtains information regarding the device and to review the current status of a device such as the battery charge, serial number and device type. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>DeviceInfo</returns>
        public DeviceInfo DeviceInfo (string deviceId)
        {
             ApiResponse<DeviceInfo> localVarResponse = DeviceInfoWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Device Information Obtains information regarding the device and to review the current status of a device such as the battery charge, serial number and device type. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>ApiResponse of DeviceInfo</returns>
        public ApiResponse< DeviceInfo > DeviceInfoWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DeviceModuleApi->DeviceInfo");

            var localVarPath = "/device/{deviceId}/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceInfo)));
        }

        /// <summary>
        /// Device Information Obtains information regarding the device and to review the current status of a device such as the battery charge, serial number and device type. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>Task of DeviceInfo</returns>
        public async System.Threading.Tasks.Task<DeviceInfo> DeviceInfoAsync (string deviceId)
        {
             ApiResponse<DeviceInfo> localVarResponse = await DeviceInfoAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Device Information Obtains information regarding the device and to review the current status of a device such as the battery charge, serial number and device type. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>Task of ApiResponse (DeviceInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceInfo>> DeviceInfoAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DeviceModuleApi->DeviceInfo");

            var localVarPath = "/device/{deviceId}/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceInfo)));
        }

        /// <summary>
        /// Device Ping To monitor or to check whether a device is available, the host can send a simple &#x60;GET&#x60; request to the URL at &#x60;/device/{deviceId}/ping&#x60; to see if the device is responding and available. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>Result</returns>
        public Result Ping (string deviceId)
        {
             ApiResponse<Result> localVarResponse = PingWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Device Ping To monitor or to check whether a device is available, the host can send a simple &#x60;GET&#x60; request to the URL at &#x60;/device/{deviceId}/ping&#x60; to see if the device is responding and available. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>ApiResponse of Result</returns>
        public ApiResponse< Result > PingWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DeviceModuleApi->Ping");

            var localVarPath = "/device/{deviceId}/ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Result>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Result) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Result)));
        }

        /// <summary>
        /// Device Ping To monitor or to check whether a device is available, the host can send a simple &#x60;GET&#x60; request to the URL at &#x60;/device/{deviceId}/ping&#x60; to see if the device is responding and available. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>Task of Result</returns>
        public async System.Threading.Tasks.Task<Result> PingAsync (string deviceId)
        {
             ApiResponse<Result> localVarResponse = await PingAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Device Ping To monitor or to check whether a device is available, the host can send a simple &#x60;GET&#x60; request to the URL at &#x60;/device/{deviceId}/ping&#x60; to see if the device is responding and available. 
        /// </summary>
        /// <exception cref="CityPay.Pos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The name of the target device used by the API.</param>
        /// <returns>Task of ApiResponse (Result)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Result>> PingAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DeviceModuleApi->Ping");

            var localVarPath = "/device/{deviceId}/ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", Configuration.ApiClient.ParameterToString(deviceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Result>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Result) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Result)));
        }

    }
}
